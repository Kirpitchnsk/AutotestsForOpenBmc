<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="4" time="27.165" timestamp="2025-05-19T01:35:01.916629" hostname="mrziegel-VirtualBox"><testcase classname="tests.api.test_redfish" name="test_authentication" time="0.524" /><testcase classname="tests.api.test_redfish" name="test_system_info" time="0.332" /><testcase classname="tests.api.test_redfish" name="test_power_management[power_on]" time="20.271"><failure message="Failed: Система не достигла состояния On за 20 секунд">auth_session = &lt;requests.sessions.Session object at 0x7abe939504a0&gt;, power_action = 'On', expected_state = 'On'

    @pytest.mark.parametrize("power_action, expected_state", [
        ("On", "On"),
        ("GracefulShutdown", "Off"),
    ], ids=["power_on", "power_off"])
    def test_power_management(
        auth_session: requests.Session,
        power_action: str,
        expected_state: str
    ):
        """Тест управления питанием с обработкой SSL-ошибок"""
        max_wait = 20
        poll_interval = 5
    
        try:
            reset_url = f"{BASE_URL}{SYSTEM_ENDPOINT}/Actions/ComputerSystem.Reset"
            response = auth_session.post(
                reset_url,
                json={"ResetType": power_action},
                verify=SSL_VERIFY,
                timeout=5
            )
    
            expected_codes = {202, 204}
            assert response.status_code in expected_codes, (
                f"Ожидался статус {expected_codes}, получен {response.status_code}"
            )
            logger.info(f"Команда {power_action} отправлена успешно. Код: {response.status_code}")
    
            start_time = time.time()
            last_state = None
    
            while time.time() - start_time &lt; max_wait:
                try:
                    system_response = auth_session.get(
                        f"{BASE_URL}{SYSTEM_ENDPOINT}",
                        verify=SSL_VERIFY,
                        timeout=5
                    )
                    system_info = system_response.json()
                    current_state = system_info.get("PowerState")
    
                    if current_state != last_state:
                        logger.info(f"Текущее состояние питания: {current_state}")
                        last_state = current_state
    
                    if current_state == expected_state:
                        logger.info(f"Система достигла ожидаемого состояния: {expected_state}")
                        break
    
                    time.sleep(poll_interval)
                except requests.exceptions.SSLError:
                    system_response = auth_session.get(
                        f"{BASE_URL}{SYSTEM_ENDPOINT}",
                        verify=False,
                        timeout=5
                    )
                    system_info = system_response.json()
                    current_state = system_info.get("PowerState")
    
                    if current_state == expected_state:
                        break
    
                    time.sleep(poll_interval)
            else:
&gt;               pytest.fail(f"Система не достигла состояния {expected_state} за {max_wait} секунд")
E               Failed: Система не достигла состояния On за 20 секунд

tests/api/test_redfish.py:159: Failed</failure></testcase><testcase classname="tests.api.test_redfish" name="test_power_management[power_off]" time="5.863" /></testsuite></testsuites>